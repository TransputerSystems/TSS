package uk.co.transputersystems.occam.il;

public abstract class ILOpVisitor<TReturn, TIdentifier, TContext> {
    public abstract TReturn visitStartProcess(StartProcess<TIdentifier> op, TContext ctx);
    public abstract TReturn visitEndProcess(EndProcess<TIdentifier> op, TContext ctx);
    public abstract TReturn visitInitProcesses(InitProcesses<TIdentifier> op, TContext ctx);
    public abstract TReturn visitSkip(Skip<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLabel(Label<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadConstant(LoadConstant<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadLocal(LoadLocal<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadArgument(LoadArgument<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadGlobal(LoadGlobal<TIdentifier> op, TContext ctx);
    public abstract TReturn visitStoreLocal(StoreLocal<TIdentifier> op, TContext ctx);
    public abstract TReturn visitStoreArgument(StoreArgument<TIdentifier> op, TContext ctx);
    public abstract TReturn visitStoreGlobal(StoreGlobal<TIdentifier> op, TContext ctx);
    public abstract TReturn visitReadChannel(ReadChannel<TIdentifier> op, TContext ctx);
    public abstract TReturn visitAdd(Add<TIdentifier> op, TContext ctx);
    public abstract TReturn visitSubtract(Subtract<TIdentifier> op, TContext ctx);
    public abstract TReturn visitMultiply(Multiply<TIdentifier> op, TContext ctx);
    public abstract TReturn visitDuplicate(Duplicate<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBranchEqZero(BranchEqZero<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBranchNotEqZero(BranchNotEqZero<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBranch(Branch<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareGreaterThan(CompareGreaterThan<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareGreaterThanOrEqual(CompareGreaterThanOrEqual<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBranchIfTrue(BranchIfTrue<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBranchIfFalse(BranchIfFalse<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareLessThan(CompareLessThan<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareLessThanOrEqual(CompareLessThanOrEqual<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareEqual(CompareEqual<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCompareNotEqual(CompareNotEqual<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBitwiseAnd(BitwiseAnd<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBitwiseOr(BitwiseOr<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBitwiseNot(BitwiseNot<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBooleanNot(BooleanNot<TIdentifier> op, TContext ctx);
    public abstract TReturn visitDivide(Divide<TIdentifier> op, TContext ctx);
    public abstract TReturn visitModulo(Modulo<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBitwiseXor(BitwiseXor<TIdentifier> op, TContext ctx);
    public abstract TReturn visitUnaryMinus(UnaryMinus<TIdentifier> op, TContext ctx);
    public abstract TReturn visitMethodStart(MethodStart<TIdentifier> op, TContext ctx);
    public abstract TReturn visitMethodEnd(MethodEnd<TIdentifier> op, TContext ctx);
    public abstract TReturn visitCall(Call<TIdentifier> op, TContext ctx);
    public abstract TReturn visitWriteChannel(WriteChannel<TIdentifier> op, TContext ctx);
    public abstract TReturn visitWritePort(WritePort<TIdentifier> op, TContext ctx);
    public abstract TReturn visitReadPort(ReadPort<TIdentifier> op, TContext ctx);
    public abstract TReturn visitReadTimer(ReadTimer<TIdentifier> op, TContext ctx);
    public abstract TReturn visitInitChannel(InitChannel<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadChannelRef(LoadChannelRef<TIdentifier> op, TContext ctx);
    public abstract TReturn visitLoadPortRef(LoadPortRef<TIdentifier> op, TContext ctx);
    public abstract TReturn visitDelayedTimerInput(DelayedTimerInput<TIdentifier> op , TContext ctx);
    public abstract TReturn visitAfter(After<TIdentifier> op , TContext ctx);
    public abstract TReturn visitLeftShift(LeftShift<TIdentifier> op , TContext ctx);
    public abstract TReturn visitRightShift(RightShift<TIdentifier> op , TContext ctx);
    public abstract TReturn visitDisableChannel(DisableChannel<TIdentifier> op, TContext ctx);
    public abstract TReturn visitEnableChannel(EnableChannel<TIdentifier> op, TContext ctx);
    public abstract TReturn visitDisableTimer(DisableTimer<TIdentifier> op, TContext ctx);
    public abstract TReturn visitEnableTimer(EnableTimer<TIdentifier> op, TContext ctx);
    public abstract TReturn visitDisableSkip(DisableSkip<TIdentifier> op, TContext ctx);
    public abstract TReturn visitEnableSkip(EnableSkip<TIdentifier> op, TContext ctx);
    public abstract TReturn visitInitAlt(InitAlt<TIdentifier> op , TContext ctx);
    public abstract TReturn visitWaitAlt(WaitAlt<TIdentifier> op , TContext ctx);
    public abstract TReturn visitEndAlt(EndAlt<TIdentifier> op , TContext ctx);
    public abstract TReturn visitEnablePort(EnablePort<TIdentifier> op , TContext ctx);
    public abstract TReturn visitDisablePort(DisablePort<TIdentifier> op , TContext ctx);
    public abstract TReturn visitMostPositive(MostPositive<TIdentifier> op, TContext ctx);
    public abstract TReturn visitMostNegative(MostNegative<TIdentifier> op, TContext ctx);
    public abstract TReturn visitBooleanAnd(BooleanAnd<TIdentifier> op , TContext ctx);
    public abstract TReturn visitBooleanOr(BooleanOr<TIdentifier> op , TContext ctx);
    public TReturn visit(ILOp<TIdentifier> op, TContext ctx) {
        return op.accept(this, ctx);
    }
}